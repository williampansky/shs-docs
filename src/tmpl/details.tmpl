<?js
    var data = obj;
    var self = this;
    var defaultObjectClass = '';

    // Check if the default value is an object or array; if so, apply code highlighting
    if (data.defaultvalue && (data.defaultvaluetype === 'object' || data.defaultvaluetype === 'array')) {
        try {
            var indentedValues = JSON.stringify(JSON.parse(data.defaultvalue), null, '  ');
            data.defaultvalue = indentedValues;
        } catch (e) {}
        data.defaultvalue = "<pre class=\"prism\"><code>" + data.defaultvalue + "</code></pre>";
        defaultObjectClass = ' class="object-value"';
    }


    /**
     * @summary Converts a number to the appropriate phase string.
     * @function convertNumbertoComponentPhase
     * @param {Number} number Number to convert to phase string.
     */
    function convertNumbertoComponentPhase(number) {
        var result;

        switch (number) {
            case 1 || 1.0:
                result = 'Phase 1 » Ideation & Initiation';
                break;
            case 1.1:
                result = 'Phase 1.1 » Conception';
                break;
            case 1.2:
                result = 'Phase 1.2 » Definition';
                break;
            case 1.3:
                result = 'Phase 1.3 » Requirements';
                break;
            case 2:
                result = 'Phase 2 » Alpha | Prototype';
                break;
            case 2.1:
                result = 'Phase 2.1 » Sekelton';
                break;
            case 2.2:
                result = 'Phase 2.2 » Linted';
                break;
            case 2.3:
                result = 'Phase 2.3 » Unit Testing';
                break;
            case 3:
                result = 'Phase 3 » Beta | Integration';
                break;
            case 3.1:
                result = 'Phase 3.1 » Code Evolution';
                break;
            case 3.2:
                result = 'Phase 3.2 » App Integration';
                break;
            case 3.3:
                result = 'Phase 3.3 » Advanced Testing';
                break;
            case 4:
                result = 'Phase 4 » Peer Review';
                break;
            case 5:
                result = 'Phase 5 » MVP Release';
                break;
        }

        return result;
    }
?>

<dl class="jsdoc-item-details">
    <?js if (data.summary) { ?>
        <div class="container">
            <dt class="tag-summary uk-text-meta">Summary:</dt>
            <dd class="tag-summary"><?js= summary ?></dd>
        </div>
    <?js } ?>

    <?js if (data.meta && self.outputSourceFiles) { ?>
        <div class="container">
            <dt class="tag-source uk-text-meta">Source:</dt>
            <dd class="tag-source">
                <?js= self.linkto(meta.shortpath) ?>, 
                <?js= self.linkto(meta.shortpath, 'line ' + meta.lineno, null, 'line' + meta.lineno) ?>
            </dd>
        </div>
    <?js } ?>

    <?js
        var classes = self.find({ kind: 'class', memberof: data.longname });
        if (classes && classes.length) {
    ?>
        <div class="container">
            <dt class="tag-class uk-text-meta">Classes:</dt>
            <dd class="tag-class">
                <?js classes.forEach(function(c) { ?>
                    <?js= self.linkto(c.longname, c.name) ?>
                <?js }); ?>
            </dd>
        </div>
    <?js } ?>

    <?js
        var mixins = self.find({ kind: 'mixin', memberof: data.longname });
        if (mixins && mixins.length) {
    ?>
        <div class="container">
            <dt class="tag-mixins uk-text-meta">Mixins:</dt>
            <dd class="tag-mixins">
                <?js mixins.forEach(function(m) { ?>
                    <?js= self.linkto(m.longname, m.name) ?>
                <?js }); ?>
            </dd>
        </div>
    <?js } ?>

    <?js
        var namespaces = self.find({ kind: 'namespace', memberof: data.longname });
        if (namespaces && namespaces.length) {
    ?>
        <div class="container">
            <dt class="tag-namespaces uk-text-meta">Namespaces:</dt>
            <dd class="tag-namespaces">
                <?js namespaces.forEach(function(m) { ?>
                    <?js= self.linkto(m.longname, m.name) ?>
                <?js }); ?>
            </dd>
        </div>
    <?js } ?>

    <?js if (kind === 'event' && data.type && data.type.names) { ?>
        <div class="container">
            <dt class="tag-event uk-text-meta">Event:</dt>
            <dd class="tag-event"><?js= self.partial('type.tmpl', data.type.names) ?></dd>
        </div>
    <?js } ?>

    <?js if (data.type && data.type.names) { ?>
        <div class="container">
            <dt class="tag-type uk-text-meta">Type:</dt>
            <dd class="tag-type"><?js= self.partial('type.tmpl', data.type.names) ?></dd>
        </div>
    <?js } ?>

    <?js if (data.returns && returns.length) { ?>
        <?js returns.forEach(function(r) { ?>
            <div class="container">
                <dt class="tag-returns uk-text-meta">Returns:</dt>
                <dd class="tag-returns"><?js= self.partial('returns.tmpl', r) ?></dd>
            </div>
        <?js }); ?>
    <?js } ?>

    <?js if (data.version) { ?>
        <div class="container">
            <dt class="tag-version uk-text-meta">Version:</dt>
            <dd
            id="componentVersion"
            class="tag-version">
                <?js= version ?>
            </dd>
        </div>
    <?js } ?>

    <?js if (data.phase) { ?>
        <div class="container">
            <dt class="tag-phase uk-text-meta">Phase:</dt>
            <?js 
            var result;
            switch (phase) {
                case '1':
                    result = {
                        text:    'Phase 1 » Ideation & Initiation',
                        tooltip: 'Components at Phase 1 are currently just rough ideas.'
                    };
                    break;
                case '1.0':
                    result = {
                        text:    'Phase 1 » Ideation & Initiation',
                        tooltip: 'Components at Phase 1 are currently just rough ideas.'
                    };
                    break;
                case '1.1':
                    result = {
                        text:    'Phase 1.1 » Conception',
                        tooltip: 'Component is recognized in the form of a shared note, or message, in a central repository (spreadsheet, Rally, etc).'
                    };
                    break;
                case '1.2':
                    result = {
                        text:    'Phase 1.2 » Definition',
                        tooltip: 'Definition requires a component outline. Must include basic desired functionality, & a visual representation.'
                    };
                    break;
                case '1.3':
                    result = {
                        text:    'Phase 1.3 » Requirements',
                        tooltip: 'Components must be completely outlined—a detailed & complex elaboration of Phase 1.2 definitions.'
                    };
                    break;
                case '2':
                    result = {
                        text:    'Phase 2 » Alpha | Prototype',
                        tooltip: 'Alpha staged phase components have graduated past initial plans and are ready to start development.'
                    };
                    break;
                case '2.0':
                    result = {
                        text:    'Phase 2 » Alpha | Prototype',
                        tooltip: 'Alpha staged phase components have graduated past initial plans and are ready to start development.'
                    };
                    break;
                case '2.1':
                    result = {
                        text:    'Phase 2.1 » Sekelton',
                        tooltip: 'Component file created, contains basic HTML, JavaScript, & scoped Sass tags.'
                    };
                    break;
                case '2.2':
                    result = {
                        text:    'Phase 2.2 » Linted',
                        tooltip: 'Phase 2.2 requires components to pass both ESLint & Stylelint rules.'
                    };
                    break;
                case '2.3':
                    result = {
                        text:    'Phase 2.3 » Unit Testing',
                        tooltip: 'Component is enforced with a basic unit test, accompanied with mock-desired data.'
                    };
                    break;
                case '3':
                    result = {
                        text:    'Phase 3 » Beta | Integration',
                        tooltip: 'Beta components are ready for the next step of advanced development.'
                    };
                    break;
                case '3.0':
                    result = {
                        text:    'Phase 3 » Beta | Integration',
                        tooltip: 'Beta components are ready for the next step of advanced development.'
                    };
                    break;
                case '3.1':
                    result = {
                        text:    'Phase 3.1 » Code Evolution',
                        tooltip: 'Semantic template HTML, complex JavaScript functionality, advanced (per-comp spec) CSS styles.'
                    };
                    break;
                case '3.2':
                    result = {
                        text:    'Phase 3.2 » App Integration',
                        tooltip: 'Component is merged and fully integrated into the application at-large.'
                    };
                    break;
                case '3.3':
                    result = {
                        text:    'Phase 3.3 » Advanced Testing',
                        tooltip: 'Verify the communication paths and interactions between components to detect interface defects.'
                    };
                    break;
                case '4':
                    result = {
                        text:    'Phase 4 » Peer Review',
                        tooltip: 'Phase 4 components have gone through, or are currently under-going, peer review & refactoring.'
                    };
                    break;
                case '4.0':
                    result = {
                        text:    'Phase 4 » Peer Review',
                        tooltip: 'Phase 4 components have gone through, or are currently under-going, peer review & refactoring.'
                    };
                    break;
                case '5':
                    result = {
                        text:    'Phase 5 » MVP Release',
                        tooltip: 'Phase 5 components have individually reached 1.0.0 SemVer & are ready for minimal-viable-product release status.'
                    };
                    break;
                case '5.0':
                    result = {
                        text:    'Phase 5 » MVP Release',
                        tooltip: 'Phase 5 components have individually reached 1.0.0 SemVer & are ready for minimal-viable-product release status.'
                    };
                    break;
                default:
                    result = {
                        text:    phase,
                        tooltip: 'Phase value not currently documented.'
                    };
                    break;
            } ?>
            <dd id="componentPhase" class="tag-phase" uk-tooltip="title: <?js= result.tooltip ?>">
                <?js= result.text ?>
            </dd>
        </div>
    <?js } ?>

    <?js if (data.since) { ?>
        <div class="container">
            <dt class="tag-since uk-text-meta">Since:</dt>
            <dd class="tag-since"><?js= since ?></dd>
        </div>
    <?js } ?>

    <?js if (data.inherited && data.inherits && !data.overrides) { ?>
        <div class="container">
            <dt class="inherited-from uk-text-meta">Inherited From:</dt>
            <dd class="inherited-from"><?js= this.linkto(data.inherits, this.htmlsafe(data.inherits)) ?></dd>
        </div>
    <?js } ?>

    <?js if (data.overrides) { ?>
        <div class="container">
            <dt class="tag-overrides uk-text-meta">Overrides:</dt>
            <dd class="tag-overrides"><?js= this.linkto(data.overrides, this.htmlsafe(data.overrides)) ?></dd>
        </div>
    <?js } ?>

    <?js if (data.implementations && data.implementations.length) { ?>
        <?js data.implementations.forEach(function(impl) { ?>
            <div class="container">
                <dt class="implementations uk-text-meta">Implementations:</dt>
                <dd class="implementations"><?js= self.linkto(impl, self.htmlsafe(impl)) ?></dd>
            </div>
        <?js }); ?>
    <?js } ?>

    <?js if (data.implements && data.implements.length) { ?>
        <?js data.implements.forEach(function(impl) { ?>
            <div class="container">
                <dt class="implements uk-text-meta">Implements:</dt>
                <dd class="implements"><?js= self.linkto(impl, self.htmlsafe(impl)) ?></dd>
            </div>
        <?js }); ?>
    <?js } ?>

    <?js if (data.mixes && data.mixes.length) { ?>
        <?js data.mixes.forEach(function(a) { ?>
            <div class="container">
                <dt class="mixes uk-text-meta">Mixes In:</dt>
                <dd class="mixes"><?js= self.linkto(a, a) ?></dd>
            </div>
        <?js }); ?>
    <?js } ?>

    <!-- <?js if (data.deprecated) { ?>
        <div class="container">
            <dt class="important tag-deprecated uk-text-meta">@deprecated:</dt>
            <?js if (data.deprecated === true) { ?>
                <dd class="yes-def tag-deprecated">Yes</dd>
            <?js } else { ?>
                <dd><span><?js= data.deprecated ?></dd>
            <?js } ?>
        </div>
    <?js } ?> -->

    <?js if (data.author && author.length) { ?>
        <?js author.forEach(function(a) { ?>
            <div class="container">
                <dt class="tag-author uk-text-meta">Author:</dt>
                <dd class="tag-author"><?js= self.resolveAuthorLinks(a) ?></dd>
            </div>
        <?js }); ?>
    <?js } ?>

    <?js if (data.copyright) { ?>
        <div class="container">
            <dt class="tag-copyright uk-text-meta">Copyright:</dt>
            <dd class="tag-copyright"><?js= copyright ?></dd>
        </div>
    <?js } ?>

    <?js if (data.license) { ?>
        <div class="container">
            <dt class="tag-license uk-text-meta">License:</dt>
            <dd class="tag-license"><?js= license ?></dd>
        </div>
    <?js } ?>

    <?js if (data.defaultvalue) { ?>
        <div class="container">
            <dt class="tag-default uk-text-meta">Default Value:</dt>
            <dd class="tag-default">
                <span<?js= defaultObjectClass ?>><?js= data.defaultvalue ?></span>
            </dd>
        </div>
    <?js } ?>

    <?js if (data.see && see.length) { ?>
        <?js see.forEach(function(s) { ?>
            <div class="container">
                <dt class="tag-see uk-text-meta">See:</dt>
                <dd class="tag-see"><?js= self.linkto(s) ?></dd>
            </div>
        <?js }); ?>
    <?js } ?>
</dl>


<!-- TUTORIALS -->
<?js if (data.tutorials && tutorials.length) { ?>
    <div class="jsdoc-item-tutorials uk-margin">
        <dt class="tag-tutorial uk-text-meta">Tutorials:</dt>
        <div class="uk-grid uk-grid-small">
            <?js tutorials.forEach(function(t) { ?>
                <dd class="tag-tutorial"><?js= self.tutoriallink(t) ?></dd>
            <?js }); ?>
        </div>
    </div>
<?js } ?>


<!-- TODO ITEMS -->
<?js if (data.todo && todo.length) { ?>
    <div class="jsdoc-item-todo uk-margin">
        <ul class="uk-list">
            <?js todo.forEach(function(t) { ?>
                <li>
                    <span class="uk-label uk-label-warning">@todo</span>
                    <span class="tag-todo uk-text-meta"><?js= t ?></span>
                </li>
            <?js }); ?>
        </ul>
    </div>
<?js } ?>


<!-- BUGS -->
<?js if (data.bug && bug.length) { ?>
    <div class="jsdoc-item-bug uk-margin">
        <ul class="uk-list">
            <?js bug.forEach(function(b) { ?>
                <li>
                    <span class="uk-label uk-label-danger">@bug</span>
                    <span class="tag-bug uk-text-meta"><?js= b ?></span>
                </li>
            <?js }); ?>
        </ul>
    </div>
<?js } ?>


<!-- PROPS -->
<?js
    var properties = data.properties;
    if (properties && properties.length && properties.forEach) {
?>
    <div class="jsdoc-item">
        <?js= this.partial('properties.tmpl', data) ?>
    </div>
<?js } ?>
